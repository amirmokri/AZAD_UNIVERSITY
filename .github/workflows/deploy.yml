name: Deploy to Hamravesh

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  DOCKER_IMAGE: university-hub

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run Django checks
        env:
          SECRET_KEY: test-secret-key
          DEBUG: True
          DB_NAME: test_db
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: localhost
          USE_S3_STORAGE: False
        run: |
          python manage.py check --deploy --fail-level WARNING || true

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Hamravesh
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Hamravesh
        run: |
          echo "Deployment triggered for Hamravesh"
          echo "Configure Hamravesh webhook or CLI deployment here"
          # Add Hamravesh-specific deployment commands
          # Example:
          # curl -X POST ${{ secrets.HAMRAVESH_WEBHOOK_URL }}
      
      - name: Notify deployment
        run: |
          echo "Deployment completed successfully"
          echo "Application is now live at https://classyabb.ir"

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    
    steps:
      - name: Notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi


# Generated by Django 4.2.24 on 2025-10-15 08:19

from django.db import migrations
from datetime import time


def parse_time_slot_to_start_end(apps, schema_editor):
    """
    Parse existing time_slot values into start_time and end_time fields.
    
    This migration safely converts time_slot strings like "07:30-09:15" 
    into separate start_time and end_time TimeField values.
    """
    ClassSchedule = apps.get_model('classes', 'ClassSchedule')
    
    # Time slot patterns to parse
    time_patterns = {
        '07:30-09:15': (time(7, 30), time(9, 15)),
        '09:15-11:00': (time(9, 15), time(11, 0)),
        '11:00-13:15': (time(11, 0), time(13, 15)),
        '13:15-15:00': (time(13, 15), time(15, 0)),
        '15:00-16:45': (time(15, 0), time(16, 45)),
        '16:45-18:00': (time(16, 45), time(18, 0)),
        '07:30-10:10': (time(7, 30), time(10, 10)),
        '10:15-13:30': (time(10, 15), time(13, 30)),
        '13:30-16:00': (time(13, 30), time(16, 0)),
        '16:00-18:30': (time(16, 0), time(18, 30)),
    }
    
    updated_count = 0
    error_count = 0
    
    for schedule in ClassSchedule.objects.filter(time_slot__isnull=False):
        try:
            time_slot = schedule.time_slot
            
            # Try to parse the time slot
            if time_slot in time_patterns:
                start_time, end_time = time_patterns[time_slot]
                schedule.start_time = start_time
                schedule.end_time = end_time
                schedule.save(update_fields=['start_time', 'end_time'])
                updated_count += 1
            else:
                # Try to parse custom format (HH:MM-HH:MM)
                if '-' in time_slot and len(time_slot.split('-')) == 2:
                    start_str, end_str = time_slot.split('-')
                    try:
                        start_hour, start_min = map(int, start_str.split(':'))
                        end_hour, end_min = map(int, end_str.split(':'))
                        schedule.start_time = time(start_hour, start_min)
                        schedule.end_time = time(end_hour, end_min)
                        schedule.save(update_fields=['start_time', 'end_time'])
                        updated_count += 1
                    except (ValueError, TypeError):
                        print(f"Warning: Could not parse time_slot '{time_slot}' for schedule {schedule.id}")
                        error_count += 1
                else:
                    print(f"Warning: Unknown time_slot format '{time_slot}' for schedule {schedule.id}")
                    error_count += 1
        except Exception as e:
            print(f"Error processing schedule {schedule.id}: {e}")
            error_count += 1
    
    print(f"Migration completed: {updated_count} schedules updated, {error_count} errors")


def reverse_parse_time_slot(apps, schema_editor):
    """
    Reverse migration: populate time_slot from start_time and end_time.
    """
    ClassSchedule = apps.get_model('classes', 'ClassSchedule')
    
    for schedule in ClassSchedule.objects.filter(start_time__isnull=False, end_time__isnull=False):
        if not schedule.time_slot:  # Only update if time_slot is empty
            time_slot_value = f"{schedule.start_time.strftime('%H:%M')}-{schedule.end_time.strftime('%H:%M')}"
            schedule.time_slot = time_slot_value
            schedule.save(update_fields=['time_slot'])


class Migration(migrations.Migration):

    dependencies = [
        ('classes', '0015_add_start_end_time_fields'),
    ]

    operations = [
        migrations.RunPython(parse_time_slot_to_start_end, reverse_parse_time_slot),
    ]
